---
# set up the project itself

- name: Creates the deployment location
  become: true
  file:
    path: "{{ DEPLOYMENT_LOCATION }}"
    state: directory
    mode: 0744
    owner: "{{ LINUX_USER }}"

- name: Setup the Git repo
  git: repo={{ GIT_REPO }}
       version={{ GIT_BRANCH }}
       dest={{ PROJECT_PATH }}
       accept_hostkey=yes
       force=yes

- name: Delete all .pyc files
  command: find . -name '*.pyc' -delete
  args:
    chdir: "{{ PROJECT_PATH }}"
  tags: git
  changed_when: False

- name: Creates log dir
  file:
    path: "{{ LOG_DIR }}"
    state: directory
    owner: "{{ LINUX_USER }}"

- name: Creates config dir
  file:
    path: "{{ CONFIG_DIR }}"
    state: directory

# otherwise it complains silently and
# blows up the world
- name: Creates gunicorn log
  file:
    path: "{{ LOG_DIR }}/{{ item }}"
    state: touch
    owner: "{{ LINUX_USER }}"
  with_items:
    - gunicorn.log
    - gunicorn.stdout.log
    - gunicorn.stderr.log
    - nginx.log

- name: Create configs
  template:
    src: "templates/{{ item }}.jinja2"
    dest: "{{ PROJECT_PATH }}/deployment/config/{{ item }}"
    mode: 0744
    owner: "{{ LINUX_USER }}"
  with_items:
    - gunicorn.conf
    - gunicorn_conf.py
    - nginx_site.conf

- name: Install packages required by the Django app inside virtualenv
  pip: virtualenv={{ VIRTUALENV_PATH }} requirements={{ REQUIREMENTS_FILE }}
  when: not USE_PROXY
  executable: pip3

- name: Install packages required by the Django app inside virtualenv
  pip: virtualenv={{ VIRTUALENV_PATH }} requirements={{ REQUIREMENTS_FILE }}
  when: USE_PROXY
  executable: pip3
  environment:
    http_proxy: "{{ PROXY }}"
    https_proxy: "{{ PROXY }}"

- name: Create local settings
  template:
    src: "templates/local_settings.py.jinja2"
    dest: "{{ PROJECT_PATH }}/{{ APPLICATION_NAME }}/local_settings.py"
    mode: 0744
    owner: "{{ LINUX_USER }}"

- name: Run Django database migrations
  args:
    chdir: "{{ PROJECT_PATH}}"
  command: "{{ VIRTUALENV_PATH }}/bin/python manage.py migrate"

- name: Run load lookup lists
  args:
    chdir: "{{ PROJECT_PATH}}"
  command: "{{ VIRTUALENV_PATH }}/bin/python manage.py load_lookup_lists"

- name: Run Django collectstatic
  args:
    chdir: "{{ PROJECT_PATH}}"
  command: "{{ VIRTUALENV_PATH }}/bin/python manage.py collectstatic --noinput"

- name: Remove old nginx default
  become: true
  file:
    state: absent
    path: "/etc/nginx/sites-available/default"

- name: Symlink nginx
  become: true
  file:
    src: "{{ PROJECT_PATH }}/deployment/config/nginx_site.conf"
    dest: "/etc/nginx/sites-available/default"
    owner: root
    group: root
    state: link

- name: Restart nginx
  become: true
  service:
    name: nginx
    state: restarted
    enabled: yes

- name: Kill gunicorn
  sudo: yes
  command: "pkill gunicorn"
  ignore_errors: True

- name: Create circus config
  become: yes
  template:
    src: "templates/circus.ini.jinja2"
    dest: "/etc/circus/circusd.ini"

- name: Create circus config
  become: yes
  template:
    src: "templates/circus.service.jinja2"
    dest: "/etc/systemd/system/circus.service"

- name: Restart circus
  command: "circusctl reload"
  ignore_errors: True

- name: Restart circus
  command: "circusctl restart"
  ignore_errors: True
